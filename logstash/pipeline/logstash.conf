input {
	beats {
		port => 5044
	}

	tcp {
		port => 5000
	}
	tcp {
		host => "0.0.0.0"
		port => "4739"
		#workers => "4"
		#queue_size => "2048"
		#receive_buffer_bytes => "16777216"
		codec => netflow {
			versions => [10]
			target => "ipfix"
			include_flowset_id => "false"
			cache_ttl => 86400
			ipfix_definitions => "/usr/share/logstash/definitions/ipfix.yml"
		}
		type => "ipfix"
  	}
}

filter {
    # process bytes and packets
    if [ipfix][octetDeltaCount] {
        ruby {
            code =>  "event.set( '[ipfix][bytes]', event.get('[ipfix][octetDeltaCount]').to_i + event.get('[ipfix][reverseOctetDeltaCount]').to_i )"
        }
    } else {
        mutate {
            replace => { "[ipfix][bytes]" => "%{[ipfix][octetDeltaCount]}" }
        }
    }
    if [ipfix][packetDeltaCount] {
        ruby {
            code =>  "event.set( '[ipfix][packets]', event.get('[ipfix][packetDeltaCount]').to_i + event.get('[ipfix][reversePacketDeltaCount]').to_i )"
        }
    } else {
        mutate {
            replace => { "[ipfix][packets]" => "%{[ipfix][reversePacketDeltaCount]}" }
        }
    }
    ruby {
        code => '
            if event.get("[ipfix][ingressNetworkPolicyName]") == ""
                event.remove("[ipfix][ingressNetworkPolicyName]")
                event.set("[ipfix][ingressNetworkPolicyName]", "N/A")
            end
            if event.get("[ipfix][ingressNetworkPolicyNamespace]") == ""
                event.remove("[ipfix][ingressNetworkPolicyNamespace]")
                event.set("[ipfix][ingressNetworkPolicyNamespace]", "N/A")
            end
            if event.get("[ipfix][egressNetworkPolicyName]") == ""
                event.remove("[ipfix][egressNetworkPolicyName]")
                event.set("[ipfix][egressNetworkPolicyName]", "N/A")
            end
            if event.get("[ipfix][egressNetworkPolicyNamespace]") == ""
                event.remove("[ipfix][egressNetworkPolicyNamespace]")
                event.set("[ipfix][egressNetworkPolicyNamespace]", "N/A")
            end
        '
    }
    mutate {
        convert => { "[ipfix][bytes]" => "integer" }
    }
}

## Add your filters / logstash plugins configuration here

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "b3h1BNuDXvAdydzEvbfr"
		index => "flow-%{+YYYY.MM.dd}"
		ecs_compatibility => disabled
	}
	stdout {codec => rubydebug}
}
